package advent.y2015;

import java.util.Arrays;

public class Day25 {
    public static void main(String[] args) {
        // To continue, please consult the code grid in the manual. Enter the code at
        // row 2947, column 3029.
        for (int i=0; i<6; ++i) {
            long row[] = new long[6];
            for (int j = 0; j<6; ++j) {
                row[j] = findKey(findOrdinal(i+1, j+1));
            }
            log(Arrays.toString(row));
        }

        long ordinal = findOrdinal(6, 4);
        log("(6,4) = " + ordinal);
        long key = findKey(ordinal);
        log("Key = " + key);

        ordinal = findOrdinal(2947, 3029);
        log("(2947,3029) = " + ordinal);
        key = findKey(ordinal);
        log("Key = " + key);
    }

    private static long findKey(long ordinal) {
        // first key is 20151125. After that, each code is generated by taking the
        // previous one, multiplying it by 252533, and then keeping the remainder from
        // dividing that value by 33554393.
        long key = 20151125;
        for (int i = 1; i<ordinal; ++i) {
            key = (key * 252533) % 33554393;
        }
        return key;
    }

    private static long findOrdinal(int row, int col) {
        int order = 2 * Math.max(row, col);
        long[][] A = new long[order][order];

        long n = 1;
        for (int i = 0; i < order; ++i) {
            int r = i;
            int c = 0;
            do {
                A[r][c] = n++;
                ++c;
                --r;
            } while (c <= i); // ...and r >= 0
        }

        if (order <= 20) {
            // log(A);
        }
        return A[row - 1][col - 1];
    }

    private static void log(long[][] a) {
        for (int i = 0; i < a[0].length; ++i) {
            log(Arrays.toString(a[i]));
        }
    }

    private static void log(String s) {
        System.out.println(s);
    }

}
